# OOP-Detector (C++ source scanner)

Pequeño analizador léxico + parser de **descenso recursivo** escrito en C++
que identifica rasgos de Programación Orientada a Objetos en archivos C++.

---
g++ -std=c++17 -g -o main tokenizer/token.cpp Parser.cpp
./main <"File Name">


| **Token**              | **Regex**                | **Description**              | **Justification**                                |                                                                |                                             |        |                                |                                                        |
| ---------------------- | ------------------------ | ---------------------------- | ------------------------------------------------ | -------------------------------------------------------------- | ------------------------------------------- | ------ | ------------------------------ | ------------------------------------------------------ |
| `CLASS_KW`             | `class`                  | Class declaration keyword    | Used to define class structures                  |                                                                |                                             |        |                                |                                                        |
| `TYPE`                 | \`int                    | float                        | char                                             | bool                                                           | void                                        | auto\` | Primitive or user-defined type | Required for type declarations and function signatures |
| `IDENTIFIER`           | `[a-zA-Z_][a-zA-Z0-9_]*` | Variable/function/class name | Identifies variables, functions, types, etc.     |                                                                |                                             |        |                                |                                                        |
| `ABRE_LLAVE`           | `\{`                     | Opening curly brace          | Opens block for class or function body           |                                                                |                                             |        |                                |                                                        |
| `CIERRA_LLAVE`         | `\}`                     | Closing curly brace          | Closes block                                     |                                                                |                                             |        |                                |                                                        |
| `ABRE_PAR`             | `\(`                     | Opening parenthesis          | Opens parameter or argument list                 |                                                                |                                             |        |                                |                                                        |
| `CIERRA_PAR`           | `\)`                     | Closing parenthesis          | Closes parameter or argument list                |                                                                |                                             |        |                                |                                                        |
| `DOS_PUNTOS`           | `:`                      | Colon                        | Used in inheritance and initializer lists        |                                                                |                                             |        |                                |                                                        |
| `COMA`                 | `,`                      | Comma                        | Separates parameters or inheritance list entries |                                                                |                                             |        |                                |                                                        |
| `IGUAL`                | `=`                      | Assignment operator          | Used in variable initialization                  |                                                                |                                             |        |                                |                                                        |
| `EXTRA`                | \`\[+-\*/=<>!&           | %]+\` or custom pattern      | Catch-all for unclassified expressions           | Placeholder for operators or tokens not yet explicitly defined |                                             |        |                                |                                                        |
| `NUMBER`               | `[0-9]+(\.[0-9]+)?`      | Numeric literal              | Supports integers and floats                     |                                                                |                                             |        |                                |                                                        |
| `ARROW`                | `->`                     | Member access operator       | Used for calling methods on pointers             |                                                                |                                             |        |                                |                                                        |
| `END`                  | `;`                      | Statement terminator         | Ends declarations, statements, and expressions   |                                                                |                                             |        |                                |                                                        |
| `NEW`                  | `new`                    | Allocation keyword           | Used for dynamic memory allocation               |                                                                |                                             |        |                                |                                                        |
| `DELETE`               | `delete`                 | Deallocation keyword         | Used for releasing memory                        |                                                                |                                             |        |                                |                                                        |
| `RETURN_KW`            | `return`                 | Return keyword               | Used in function return statements               |                                                                |                                             |        |                                |                                                        |
| `SQUIGLY`              | `~`                      | Destructor identifier prefix | Used to identify destructors                     |                                                                |                                             |        |                                |                                                        |
| `ESPECIFICADOR_ACCESO` | \`public                 | private                      | protected\`                                      | Access control specifier                                       | Used in class definitions for encapsulation |        |                                |                                                        |